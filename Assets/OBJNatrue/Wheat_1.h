// "Wheat_1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Wheat_1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Wheat_1_version_
const char Wheat_1_version[4] = { '0','1','9','d' };
#define _Wheat_1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Wheat_1_vertexcount_
const unsigned Wheat_1_vertexcount = 82;
#define _Wheat_1_vertexcount_
#endif
#ifndef _Wheat_1_indexcount_
const unsigned Wheat_1_indexcount = 120;
#define _Wheat_1_indexcount_
#endif
#ifndef _Wheat_1_materialcount_
const unsigned Wheat_1_materialcount = 1; // can be used for batched draws
#define _Wheat_1_materialcount_
#endif
#ifndef _Wheat_1_meshcount_
const unsigned Wheat_1_meshcount = 1;
#define _Wheat_1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Wheat_1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Wheat_1_vertices[82] =
{
	{	{ -0.011432f, 0.094378f, -0.013223f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.994100f, -0.095600f, -0.051800f }	},
	{	{ -0.002827f, -0.000306f, -0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.994100f, -0.095600f, -0.051800f }	},
	{	{ -0.003181f, -0.000306f, 0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.994100f, -0.095600f, -0.051800f }	},
	{	{ -0.012772f, 0.094374f, 0.012525f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.994100f, -0.095600f, -0.051800f }	},
	{	{ -0.032800f, 0.171214f, 0.015104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.966900f, -0.250300f, -0.050400f }	},
	{	{ -0.031083f, 0.171214f, -0.017868f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.966900f, -0.250300f, -0.050400f }	},
	{	{ -0.011432f, 0.094378f, -0.013223f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.966900f, -0.250300f, -0.050400f }	},
	{	{ -0.012772f, 0.094374f, 0.012525f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.966900f, -0.250300f, -0.050400f }	},
	{	{ -0.059848f, 0.204446f, 0.010073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.772000f, -0.634400f, -0.040200f }	},
	{	{ -0.058507f, 0.204446f, -0.015674f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.772000f, -0.634400f, -0.040200f }	},
	{	{ -0.031083f, 0.171214f, -0.017868f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.772000f, -0.634400f, -0.040200f }	},
	{	{ -0.032800f, 0.171214f, 0.015104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.772000f, -0.634400f, -0.040200f }	},
	{	{ -0.108818f, 0.212982f, -0.001974f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.169600f, -0.985500f, -0.008800f }	},
	{	{ -0.108463f, 0.212982f, -0.008778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.169600f, -0.985500f, -0.008800f }	},
	{	{ -0.058507f, 0.204446f, -0.015674f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.169600f, -0.985500f, -0.008800f }	},
	{	{ -0.059848f, 0.204446f, 0.010073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.169600f, -0.985500f, -0.008800f }	},
	{	{ -0.108818f, 0.212982f, -0.001974f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005600f, -1.000000f, 0.000300f }	},
	{	{ -0.118241f, 0.212928f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005600f, -1.000000f, 0.000300f }	},
	{	{ -0.108463f, 0.212982f, -0.008778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005600f, -1.000000f, 0.000300f }	},
	{	{ 0.002827f, 0.000306f, 0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.994000f, 0.095900f, 0.051800f }	},
	{	{ 0.003181f, 0.000306f, -0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.994000f, 0.095900f, 0.051800f }	},
	{	{ -0.005507f, 0.095567f, -0.012915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.994000f, 0.095900f, 0.051800f }	},
	{	{ -0.006848f, 0.095567f, 0.012833f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.994000f, 0.095900f, 0.051800f }	},
	{	{ -0.005507f, 0.095567f, -0.012915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.966500f, 0.251800f, 0.050300f }	},
	{	{ -0.025707f, 0.174039f, -0.017588f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.966500f, 0.251800f, 0.050300f }	},
	{	{ -0.027424f, 0.174039f, 0.015384f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.966500f, 0.251800f, 0.050300f }	},
	{	{ -0.006848f, 0.095567f, 0.012833f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.966500f, 0.251800f, 0.050300f }	},
	{	{ -0.025707f, 0.174039f, -0.017588f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.771600f, 0.634900f, 0.040200f }	},
	{	{ -0.054985f, 0.209490f, -0.015491f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.771600f, 0.634900f, 0.040200f }	},
	{	{ -0.056326f, 0.209490f, 0.010257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.771600f, 0.634900f, 0.040200f }	},
	{	{ -0.027424f, 0.174039f, 0.015384f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.771600f, 0.634900f, 0.040200f }	},
	{	{ -0.054985f, 0.209490f, -0.015491f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.181300f, 0.983400f, 0.009400f }	},
	{	{ -0.107673f, 0.219139f, -0.008737f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.181300f, 0.983400f, 0.009400f }	},
	{	{ -0.108027f, 0.219139f, -0.001933f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.181300f, 0.983400f, 0.009400f }	},
	{	{ -0.056326f, 0.209490f, 0.010257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.181300f, 0.983400f, 0.009400f }	},
	{	{ -0.108027f, 0.219139f, -0.001933f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.107673f, 0.219139f, -0.008737f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.118241f, 0.219139f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.002827f, 0.000306f, 0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036500f, -0.100900f, 0.994200f }	},
	{	{ -0.006848f, 0.095567f, 0.012833f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036500f, -0.100900f, 0.994200f }	},
	{	{ -0.012772f, 0.094374f, 0.012525f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036500f, -0.100900f, 0.994200f }	},
	{	{ -0.003181f, -0.000306f, 0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036500f, -0.100900f, 0.994200f }	},
	{	{ 0.003181f, 0.000306f, -0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.101000f, -0.994900f, 0.005300f }	},
	{	{ 0.002827f, 0.000306f, 0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.101000f, -0.994900f, 0.005300f }	},
	{	{ -0.003181f, -0.000306f, 0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.101000f, -0.994900f, 0.005300f }	},
	{	{ -0.002827f, -0.000306f, -0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.101000f, -0.994900f, 0.005300f }	},
	{	{ -0.005507f, 0.095567f, -0.012915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.066100f, -0.095200f, -0.993300f }	},
	{	{ 0.003181f, 0.000306f, -0.003239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.066100f, -0.095200f, -0.993300f }	},
	{	{ -0.002827f, -0.000306f, -0.003552f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.066100f, -0.095200f, -0.993300f }	},
	{	{ -0.011432f, 0.094378f, -0.013223f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.066100f, -0.095200f, -0.993300f }	},
	{	{ -0.006848f, 0.095567f, 0.012833f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036800f, -0.042600f, 0.998400f }	},
	{	{ -0.027424f, 0.174039f, 0.015384f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036800f, -0.042600f, 0.998400f }	},
	{	{ -0.032800f, 0.171214f, 0.015104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036800f, -0.042600f, 0.998400f }	},
	{	{ -0.012772f, 0.094374f, 0.012525f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036800f, -0.042600f, 0.998400f }	},
	{	{ -0.025707f, 0.174039f, -0.017588f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.067000f, -0.042600f, -0.996800f }	},
	{	{ -0.005507f, 0.095567f, -0.012915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.067000f, -0.042600f, -0.996800f }	},
	{	{ -0.011432f, 0.094378f, -0.013223f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.067000f, -0.042600f, -0.996800f }	},
	{	{ -0.031083f, 0.171214f, -0.017868f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.067000f, -0.042600f, -0.996800f }	},
	{	{ -0.027424f, 0.174039f, 0.015384f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105500f, 0.060900f, 0.992600f }	},
	{	{ -0.056326f, 0.209490f, 0.010257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105500f, 0.060900f, 0.992600f }	},
	{	{ -0.059848f, 0.204446f, 0.010073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105500f, 0.060900f, 0.992600f }	},
	{	{ -0.032800f, 0.171214f, 0.015104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105500f, 0.060900f, 0.992600f }	},
	{	{ -0.054985f, 0.209490f, -0.015491f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.060900f, -0.998100f }	},
	{	{ -0.025707f, 0.174039f, -0.017588f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.060900f, -0.998100f }	},
	{	{ -0.031083f, 0.171214f, -0.017868f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.060900f, -0.998100f }	},
	{	{ -0.058507f, 0.204446f, -0.015674f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.060900f, -0.998100f }	},
	{	{ -0.056326f, 0.209490f, 0.010257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.222300f, 0.066100f, 0.972700f }	},
	{	{ -0.108027f, 0.219139f, -0.001933f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.222300f, 0.066100f, 0.972700f }	},
	{	{ -0.108818f, 0.212982f, -0.001974f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.222300f, 0.066100f, 0.972700f }	},
	{	{ -0.059848f, 0.204446f, 0.010073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.222300f, 0.066100f, 0.972700f }	},
	{	{ -0.107673f, 0.219139f, -0.008737f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120000f, 0.066100f, -0.990600f }	},
	{	{ -0.054985f, 0.209490f, -0.015491f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120000f, 0.066100f, -0.990600f }	},
	{	{ -0.058507f, 0.204446f, -0.015674f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120000f, 0.066100f, -0.990600f }	},
	{	{ -0.108463f, 0.212982f, -0.008778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120000f, 0.066100f, -0.990600f }	},
	{	{ -0.108027f, 0.219139f, -0.001933f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.371000f, 0.020600f, 0.928400f }	},
	{	{ -0.118241f, 0.219139f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.371000f, 0.020600f, 0.928400f }	},
	{	{ -0.118241f, 0.212928f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.371000f, 0.020600f, 0.928400f }	},
	{	{ -0.108818f, 0.212982f, -0.001974f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.371000f, 0.020600f, 0.928400f }	},
	{	{ -0.118241f, 0.219139f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.272500f, 0.020600f, -0.961900f }	},
	{	{ -0.107673f, 0.219139f, -0.008737f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.272500f, 0.020600f, -0.961900f }	},
	{	{ -0.108463f, 0.212982f, -0.008778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.272500f, 0.020600f, -0.961900f }	},
	{	{ -0.118241f, 0.212928f, -0.005876f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.272500f, 0.020600f, -0.961900f }	},
};
#define _Wheat_1_vertices_
#endif
#ifndef _Wheat_1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Wheat_1_indices[120] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 20, 21,
	 22, 19, 21,
	 23, 24, 25,
	 26, 23, 25,
	 27, 28, 29,
	 30, 27, 29,
	 31, 32, 33,
	 34, 31, 33,
	 35, 36, 37,
	 38, 39, 40,
	 41, 38, 40,
	 42, 43, 44,
	 45, 42, 44,
	 46, 47, 48,
	 49, 46, 48,
	 50, 51, 52,
	 53, 50, 52,
	 54, 55, 56,
	 57, 54, 56,
	 58, 59, 60,
	 61, 58, 60,
	 62, 63, 64,
	 65, 62, 64,
	 66, 67, 68,
	 69, 66, 68,
	 70, 71, 72,
	 73, 70, 72,
	 74, 75, 76,
	 77, 74, 76,
	 78, 79, 80,
	 81, 78, 80,
};
#define _Wheat_1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Wheat_1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Wheat_1_materials[1] =
{
	{
		{{ 0.185317f, 0.358380f, 0.101168f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Green",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Wheat_1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Wheat_1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Wheat_1_batches[1][2] =
{
	{ 120, 0 },
};
#define _Wheat_1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Wheat_1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Wheat_1_meshes[1] =
{
	{
		"default",
		120,
		0,
		0,
	},
};
#define _Wheat_1_meshes_
#endif
